Magic_function

1. method의 이름 앞뒤에 더블 언더스코어(__)가 붙어있는 method를 지칭해요.

대표적인 macig_function => __init__()

2. class안에 정의되어 있는 특수한 형태의 method

3. 특수한 상황에서 그에 맞는 macig_function이 callback(호출)

__init__ : 


__del__ : 객체가 종료될때 호출, 명시적으로 객체를 메모리에서 지울 수 있다. __del__이 호출 ex) del stu1 

__add__ : + 기호


__repr__ : 객체를 출력할때 

__lt__ : 부등식 기호, 객체간 비교할때 앞에 인자를 기준으로


first_class 

first_class_citizen

프로그램의 구성요소(개체)가 다음조건을 만족하면 first_class_citizen

1. 구성요소가 변수나 데이터 구조의 속성으로 저장될 수 있어야한다.

2. 함수의 인자로 전달될 수 있어야한다.

3. 함수의 결과로 리턴될 수 있어야한다.

1급 객체가
1급 함수

python은 일급함수를 지원하는 언어
함수를 runtime으로 생성할 수 있음

함수를 다른 함수의 리턴값으로 사용


closure
일급함수의 개념을 이용하여 스코프에 묶인 변수를 바인딩하기 위한 기술

클로저는 데이터를 저장한 레코드
스코프안의 변수가 소멸되어도 그에 대한 접근을 클로져를 통해 할 수 있음
런타임시에 내가 필요한 함수를 만들어 낼 수 있음

# 1. 함수를 변수에 저장할 수 있어요!

# def my_add(x,y):
#     return x + y
#
# print(my_add)
#
# f = my_add
#
# print(f(100,200))

# 2. 함수를 다른 함수의 인자로 전달할 수 있어요!

# def my_add(x,y):
#     return x + y
#
# def my_sub(x,y):
#     return x - y
#
#
# def my_operation(func, arg_list):
#     result = []
#
#     for (tmp1,tmp2) in arg_list:
#         result.append(func(tmp1,tmp2))
#
#     return result
#
#
# data = [(1, 2), (3, 4), (5, 6)]
#
# print(my_operation(my_sub,data))

# 3. 함수를 다른 함수의 리턴값으로 사용할 수 있어요!
#    => Closure라는 개념도 같이 이해해야 해요!

# def my_add(x,y):
#     return x + y
#
# print(my_add)
#
# f = my_add
#
# print(f(100,200))


def addMaker(x):   # x는 지역변수로 함수가 호출되면 생성되고 함수가 종료되면 없어져요!!

    def my_add_maker(y):
        return x + y

    return my_add_maker

add_5 = addMaker(5)
add_10 = addMaker(10)

print(add_5(100))
print(add_10(100))
