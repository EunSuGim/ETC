
- pip install Django
- django-admin startproject my_polls
- move my_polls MyPollSystem
- cd MyPollSystem
- python manage.py startapp polls
==> 기본적인 scaffolding
python manage.py migrate => 관리자 table  생성
python manage.py createsuperuser => 관리자 계정 생성

pycharm 실행
=> 1. 환경설정 
        setting.py 설정
     2. Model 구현
        polls application안에 models.py에서 class구현
     3. Model에 대한 Database명세를 만들고 실제 데이터베이스에 구현
        python manage.py makemigrations
        python manage.py migrate
     4. URL 설정 작업을 해야 해요!
        project의 urls.py에 가서 계층적으로 처리
        application의 urls.py로 와서 URL 처리가 필요.
     5. View와 Template 처리를 해야 해요!
        Template부터 처리하는게 좋아요
        application folder안에 template folder를 생성하고
        그안에 html들을 만들어 넣어요!
        View안에 function을 만들어서 request에 대한 결과를 만들어 내야 해요!
        python manage.py runserver

=============================================

8월 5일(수요일)

Polls project에서 배웠던 내용을 기반으로
ModelForm을 이용해서 CRUD 구현을 알아보아요!!
CRUD( Create, Read, Update, Delete )

ModelForm을 이용하면 사용자 입력양식 처리하는게 한결 쉬워져요!
여기에 Bootstrap도 포함해서 Web application을 만들어 보아요!!

1. 필요한 package들을 설치해야 해요!
   => pip install Django
   추가적으로 bootstrap에 대한 package를 설치하려 해요!
   일반적인 HTML 파일을 만들고 Bootstrap CDN과 tag, 속성을 이용하면
   Bootstrap을 이용할 수 있어요!
   그런데 이번에는... ModelForm을 이용할것이고 이놈이 사용자 입력양식
   HTML을 자동으로 만들어줘요! 자동으로 생성되기 때문에 Bootstrap을
   적용할 수 없어요! 그래서 이런경우에 사용자 입력양식에  Bootstrap을
   적용하기 위해서 특정 package를 설치해야 해요!
   => pip install Django-bootstrap4

2. Project를 생성 + application 생성
   Django는 framework이고 당연히  scaffolding기능을 제공해요!
   특정명령어를 이용해서 필요한 폴더와 파일을 자동으로 생성해야 합니다.!
   cmd를 이용해서 command창을 열고 현재 working directory를
   python-Django 폴더로 변경해요!!
   C:\python-Django>django-admin startproject blog
   
   해당명령을 실행하면 기본적인 프로젝트 구조가 만들어져요!
   우리 project(blog)와 앞으로 생성할 application을 포함하고 있는 폴더가
   하나 만들어지는데 이 폴더의 이름을 MyBlogSystem로 변경

   => 하나의 application을 우리 프로젝트에 추가해요!!
   python manage.py startapp posts

3. Project 설정(setting)
   => blog project 폴더안에 있는 settings.py파일을 수정해서 설정을 잡아요!
  
4. 우리의 project를 web에 deploy해 봐야 해요!!
   web에 deploy하기 이전에.. 기본 Table부터 생성해야 해요!
   => python manage.py migrate
   관리자 계정이 있어야 Admin page(관리자 화면)를 사용할 수 있어요!
   => python manage.py createsuperuser
   설정을 다 했으니 이제 web에 deploy를 해 보아요!!
   => python manage.py runserver

========== 프로젝트의 기본설정이 완성 ===============

5. Model 구현
   기능을 구현하러 가야 해요!! application을 구현해야 해요!
   기능을 구현할 때 제일먼저해야 하는 일은 
   사용할 데이터에 대한 정확한 명세를 작성하는 거예요!!
   Django는 ORM을 이용하기 때문에 class를 이용해서 Database를 사용해요!
   ==> Model을 만들어야 해요!!
   posts application폴더내에 models.py 파일에 Model을 정의
   이렇게 만든 내가 만든 model을 Admin page에 반영하기 위해서 
   admin.py에 class를 등록해야 해요!!
   Model을 생성했기 때문에 데이터베이스에 변경이 필요!
   => 데이터베이스를 이렇게 저렇게 변경하세요 라는 명세(초안)가 필요!!
        python manage.py makemigrations
   => 초안이 완성되면 실제로 데이터베이스에 적용해서 Table을 생성.
        python manage.py migrate 

6. URL 경로 설정
   blog project안에 urls.py부터 설정해야 해요!!
   posts application안에서 urls.py를 설정해야 해요!!        
   base template html파일을 blog project 안에 templates 폴더안에 생성.

7. ModelForm 생성
   => 사용자 입력양식을 우리가 직접 HTML template안에 입력하는게 아니라
        Model을 기반으로 사용자 입력양식을 자동으로 생성해 줄 수 있는데
        ModelForm을 이용하면 이 작업을 할 수 있어요!!
     
       class를 작성해야 해요!! => 어느파일에서 만들어야 하나요?? 
       => forms.py에서 정의해야 해요!!

8. list page 생성
   - views.py을 수정해서 list/가 요청되었을 때 해야하는 일을 기술.       

9. create page 생성

10. delete 기능 구현
    
======================================

8월 6-7일(목요일,금요일)

- 다음주 화요일(특강)
- 다음주 수요일날 간단하게 필답평가, 수행평가가 진행
  필답평가 => 4지선다형 문제(70점 이하는 재시험)
  수행평가 => 1. 영화진흥위원회 Open API를 AJAX방식으로 호출해서
                      영화검색하는 프로그램
                      (화면캡쳐 + 소스코드 => 워드파일로 제출)
                   2. 게시판 프로그램을 작성해서 수행평가로 제출
                      - 1단계 : 기본 게시판 작성
                                  (게시글 목록 + 게시글 상세보기 - 댓글 제외)
                      - 2단계 : 댓글 게시판 작성
                                  (댓글 기능이 제공되는 게시판 작성)
                      - 3단계 : 로그인 기능 추가
                                  (글 작성자를 로그인한 사람의 이름으로 지정해서 
                                   글 저장)